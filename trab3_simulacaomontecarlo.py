# -*- coding: utf-8 -*-
"""trab3 simulacaoMonteCarlo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rUwDG-eP6L5unMDEC4Ws0EKuM-Iz2O3B

#Universidade Federal do RN
###Programa de Pós Graduação em Engenharia Elétrica e Computação

Processos Estocásticos

Prof. Pablo Javier Alsina

Calcular (ou estimar) a área de uma elipse considerando a teoria do método Monte Carlo de geração de pontos uniformemente distribuídos e inferir a área de uma figura subscrita em outra proporcionalmente.
"""

import numpy as np
import matplotlib.pyplot as plt
plt.style.use('seaborn-whitegrid')

n=1000
Le=.9
Ae=.45
fig = plt.figure(figsize=[25.0,7.0])
result=np.zeros(10)

for j in range(10):

    nc=0.
    ax = fig.add_subplot(2,5,(j+1))
    plt.axis([-1.5, 1.5, -1., 1.])

    for i in range(n):
        x=np.random.uniform(-1.0,1.0)
        y=np.random.uniform(-0.5,0.5)
        if(x**2)/(Le**2)+(y**2)/(Ae**2)<=1.0:
            plt.scatter(x,y,color="red", marker=".")
            nc=nc+1.0
        else:
            plt.scatter(x,y,color="black", marker=".")
    
    result[j]=nc

plt.show()

print("Area aprox: ",2*np.mean(result)/n)
print("Area correta: ", np.pi*Le*Ae)
print("Erro :",n,np.abs(np.pi*Le*Ae-2*np.mean(result)/n))

import pandas as pd
correto=1.2723450247038663
aprox=[1.2326900494077324,1.2846900494077327,1.2646,1.2678500494077327,1.27394]
errox=[0.0396549752961339,0.012345024703866336,0.007745024703866399,0.00449497529613363,0.0015949752961337271]
erroy=[100,500,1000,5000,10000]
plt.plot(erroy, errox, 'ro--' )